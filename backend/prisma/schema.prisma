// Generate Prisma client in default location

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ──────────────────────────────────────────────
//   ─── CORE DOMAIN MODELS ─────────────────────
// ──────────────────────────────────────────────
//

model Structure {
  id        Int         @id @default(autoincrement())
  name      String
  level     String      // e.g. NATIONAL | CITY | SUBURB
  parentId  Int?        
  parent    Structure?  @relation("StructureToChildren", fields: [parentId], references: [id])
  children  Structure[] @relation("StructureToChildren")

  users     User[]
  assets    Asset[]

  @@index([parentId])
  @@index([level])
}

model Role {
  id         Int     @id @default(autoincrement())
  name       String  @unique     // ADMIN | NATIONAL | CITY | SUBURB
  scopeLevel String               // describes permission depth
  users      UserRole[]
}

model User {
  id           Int        @id @default(autoincrement())
  name         String
  email        String     @unique
  passwordHash String
  structureId  Int?
  structure    Structure? @relation(fields: [structureId], references: [id])
  roles        UserRole[]

  @@index([structureId])
}

model UserRole {
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Asset {
  id          Int        @id @default(autoincrement())
  name        String
  type        String     // hospital | school | power | water etc.
  structureId Int
  structure   Structure  @relation(fields: [structureId], references: [id])
  gx          Int        // grid x (for isometric placement)
  gy          Int
  w           Int
  h           Int
  status      String     // active | offline | maintenance

  @@index([structureId])
  @@index([type])
}

// ======================================================
// City Builder Schema
// Structured database for building types,
// categories, and city-level instances.
// ======================================================


// ======================================================
// ENUMS
// ======================================================

enum ResourceType {
  POWER
  WATER
  FOOD
  SERVICES
  HOUSING
  EMPLOYMENT
}

// Minimum role level required to view/place a building
enum RoleLevel {
  SUBURB
  CITY
  NATIONAL
}

// ======================================================
// MAIN MODELS
// ======================================================

model BuildingCategory {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  buildings   Building[]
}

// Core definition for each unique building type (e.g., "Power Station 4x4", "Farm 4x4", etc.)
model Building {
  id              Int       @id @default(autoincrement())
  name            String
  // Path to visual asset (relative to public /assets folder)
  file            String?
  sizeX           Int
  sizeY           Int
  blocks          Int
  employs         Int?
  houses          Int?
  services        Int?
  feeds           Int?
  waterUsage      Int?
  powerUsage      Int?
  waterOutput     Int?
  powerOutput     Int?
  categoryId      Int
  category        BuildingCategory @relation(fields: [categoryId], references: [id])
  minRoleLevel    RoleLevel @default(CITY)

  // For simulation / analytics
  cityBuildings   CityBuilding[]
  // Resource statistics for this building (e.g. power, water)
  resourceStats   BuildingResourceStat[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Represents a simulated or real city or map instance.
model City {
  id          Int            @id @default(autoincrement())
  name        String
  population  Int?            // optional for aggregate stats
  cityBuildings CityBuilding[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Many-to-many mapping between City and Building
// Allows for tracking quantity of each building type.
model CityBuilding {
  id          Int       @id @default(autoincrement())
  cityId      Int
  buildingId  Int
  // Grid coordinates for placed building (optional for aggregate entries)
  gx          Int?
  gy          Int?
  quantity    Int       @default(1)
  city        City      @relation(fields: [cityId], references: [id])
  building    Building  @relation(fields: [buildingId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// ======================================================
// OPTIONAL SUPPORT TABLES (for later extensions)
// ======================================================

// To allow flexible key-value storage for resources (e.g. “water”, “power”)
model BuildingResourceStat {
  id          Int           @id @default(autoincrement())
  buildingId  Int
  type        ResourceType
  input       Int?           // amount consumed
  output      Int?           // amount produced
  building    Building       @relation(fields: [buildingId], references: [id])
}