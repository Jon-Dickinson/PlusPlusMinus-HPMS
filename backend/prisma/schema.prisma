// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Generate Prisma client in default location
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ──────────────────────────────────────────────
//   ─── CORE DOMAIN MODELS ─────────────────────
// ──────────────────────────────────────────────
//

model Structure {
  id        Int         @id @default(autoincrement())
  name      String
  level     String      // e.g. NATIONAL | CITY | SUBURB
  parentId  Int?        
  parent    Structure?  @relation("StructureToChildren", fields: [parentId], references: [id])
  children  Structure[] @relation("StructureToChildren")

  users     User[]
  assets    Asset[]

  @@index([parentId])
  @@index([level])
}

model Role {
  id         Int     @id @default(autoincrement())
  name       String  @unique     // ADMIN | NATIONAL | CITY | SUBURB
  scopeLevel String               // describes permission depth
  users      UserRole[]
}

model User {
  id           Int        @id @default(autoincrement())
  name         String
  email        String     @unique
  passwordHash String
  structureId  Int?
  structure    Structure? @relation(fields: [structureId], references: [id])
  roles        UserRole[]

  @@index([structureId])
}

model UserRole {
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Asset {
  id          Int        @id @default(autoincrement())
  name        String
  type        String     // hospital | school | power | water etc.
  structureId Int
  structure   Structure  @relation(fields: [structureId], references: [id])
  gx          Int        // grid x (for isometric placement)
  gy          Int
  w           Int
  h           Int
  status      String     // active | offline | maintenance

  @@index([structureId])
  @@index([type])
}